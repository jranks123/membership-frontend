define(['$', 'bean', 'src/modules/form/validation/display'], function ($, bean, validationDisplay) {
    'use strict';

    var CURRENCY_ATTR = 'data-currency';
    var DATA_CURRENCY_SEL = '[' + CURRENCY_ATTR + ']';
    var BILLING_PERIOD_CONTAINER_EL = '.js-billing-period__container' + DATA_CURRENCY_SEL;
    var PAYMENT_OPTIONS_CONTAINER_EL = $('.js-payment-options-container')[0];
    var CARD_DETAILS_NOTE_EL = $('.js-card-details-note')[0];
    var CARD_NOTE_CURRENCIES_ELS = $(DATA_CURRENCY_SEL, CARD_DETAILS_NOTE_EL);
    var CARD_NOTE_PERIOD = '.js-card-note-pricing-period';
    var CARD_NOTE_PRICING_CHARGE = '.js-card-note-pricing-charge';
    var SUBMIT_BTN_EL = $('.js-submit-input')[0];
    var DELIVERY_COUNTRY_EL = $('#country-deliveryAddress')[0];
    var BILLING_COUNTRY_EL = $('#country-billingAddress')[0];
    var BILLING_ADDRESS_SEL = $('.js-billingAddress-fieldset');
    var BILLING_ADDRESS_EL = BILLING_ADDRESS_SEL[0];
    var USE_BILLING_ADDRESS_EL = $('#use-billing-address')[0];
    var USE_DELIVERY_ADDRESS_EL = $('#use-delivery-address')[0];
    var BILLING_CTA_SEL = $('.js-toggle-billing-address');
    var FRIEND_FORM_EL = $('.js-friend-form')[0];

    var checkoutForm = guardian.membership.checkoutForm;

    /**
     * One way binding for the model object in 'guardian.membership.checkoutForm'.
     * This object is generated by the backend and mutated as the user interacts with the form.
     */

    function renderPrices() {
        hideBillingAddress();
        selectDeliveryCountry();
        renderPaymentOptions();
        renderCardDetailsNotes();
        renderSubmitButton();
    }

    var hasParent = function (elem) {
        return elem.parentNode;
    };

    function hideBillingAddress() {
        if (!hasParent(BILLING_ADDRESS_EL) && checkoutForm.showBillingAddress) {
            BILLING_ADDRESS_SEL.insertAfter(BILLING_CTA_SEL);
        } else if (hasParent(BILLING_ADDRESS_EL) && !checkoutForm.showBillingAddress){
            validationDisplay.resetErrorState($('[required]', BILLING_ADDRESS_SEL));
            BILLING_ADDRESS_SEL.detach();
        }
    }

    function selectDeliveryCountry() {
        selectCountry(DELIVERY_COUNTRY_EL, checkoutForm.deliveryCountry);
        if (!checkoutForm.showBillingAddress && checkoutForm.selectedBillingCountry !== checkoutForm.billingCountry) {
            selectCountry(BILLING_COUNTRY_EL, checkoutForm.billingCountry);
            BILLING_COUNTRY_EL.dispatchEvent(new Event('change'));
        }
    }

    function selectCountry(selectEl, country) {
        toArray($('option', selectEl)).forEach(function (el) {
            if ($(el).val() == country) {
                $(el)[0].selected = true;
            }
        });
    }

    function renderPaymentOptions() {
        toArray($(BILLING_PERIOD_CONTAINER_EL, PAYMENT_OPTIONS_CONTAINER_EL)).forEach(function (el) {
            toggleCurrency(el);
            setBillingPeriod(el);
        });
    }

    function renderCardDetailsNotes() {
        toArray(CARD_NOTE_CURRENCIES_ELS).forEach(function (el) {
            toggleCurrency(el);
        });

        var attr = 'data-' + checkoutForm.billingPeriod;
        var paymentTakenEl = $(dataCurrencySel(checkoutForm.currency, CARD_NOTE_PRICING_CHARGE), CARD_DETAILS_NOTE_EL)[0];
        var periodEl = $(dataCurrencySel(checkoutForm.currency, CARD_NOTE_PERIOD), CARD_DETAILS_NOTE_EL)[0];

        paymentTakenEl.innerHTML = paymentTakenEl.getAttribute(attr);
        periodEl.innerHTML = periodEl.getAttribute(attr);
    }

    function renderSubmitButton() {
        toArray($(DATA_CURRENCY_SEL, SUBMIT_BTN_EL)).forEach(function (el) {
            var elCurrency = $(el).attr('data-currency');
            var elBillingPeriod = $(el).attr('data-billing-period');

            if (checkoutForm.currency === elCurrency && checkoutForm.billingPeriod === elBillingPeriod) {
                el.classList.remove('is-hidden');
            } else {
                el.classList.add('is-hidden');
            }
        });
    }

    function setBillingPeriod(el) {
        toArray(el.querySelectorAll('input[type="radio"]')).forEach(function (inputEl) {
            var elBillingPeriod = inputEl.value;
            var elCurrency = inputEl.getAttribute(CURRENCY_ATTR);
            if (elBillingPeriod === checkoutForm.billingPeriod && elCurrency === checkoutForm.currency) {
                inputEl.checked = true;
            }
            else {
                inputEl.checked = false;
            }
        });
    }

    var init = function () {
        checkoutForm.deliveryCountry = checkoutForm.defaultCountry;

        if (PAYMENT_OPTIONS_CONTAINER_EL && checkoutForm) {
            checkoutForm.showBillingAddress = false;
            checkoutForm.billingCountry = checkoutForm.deliveryCountry;
            addListeners();
            renderPrices();
        }

        if (FRIEND_FORM_EL && checkoutForm) {
            selectCountry(DELIVERY_COUNTRY_EL, checkoutForm.deliveryCountry);
        }
    };

    var addListeners = function () {
        bean.on(PAYMENT_OPTIONS_CONTAINER_EL, 'click', 'input', function (e) {
            var input = e.target;
            checkoutForm.billingPeriod = $(input).val();
            renderPrices();
        });

        bean.on(DELIVERY_COUNTRY_EL, 'change', function(e) {
            var input = e.target;
            var selectedCountry = $(input).val();

            checkoutForm.deliveryCountry = selectedCountry;
            if (!checkoutForm.showBillingAddress) {
                checkoutForm.billingCountry = selectedCountry;
            }

            renderPrices();
        });

        bean.on(BILLING_COUNTRY_EL, 'change', function(e) {
            var input = e.target;
            var selectedCountry = $(input).val();
            var selectedEl = toArray($('option', input)).filter(function (el) {
                return $(el).val() === selectedCountry;
            })[0];
            var selectedCurrency = $(selectedEl).attr(CURRENCY_ATTR);

            // handles the case where the initial choice is blank,
            // e.g. when you are a european supporter
            if (selectedCurrency) {
                checkoutForm.currency = selectedCurrency;
            }
            checkoutForm.selectedBillingCountry = selectedCountry;
            checkoutForm.billingCountry = selectedCountry;

            renderPrices();
        });

        bean.on(USE_BILLING_ADDRESS_EL, 'click', function() {
            checkoutForm.showBillingAddress = true;

            renderPrices();
        });

        bean.on(USE_DELIVERY_ADDRESS_EL, 'click', function() {
            checkoutForm.showBillingAddress = false;
            checkoutForm.billingCountry = checkoutForm.deliveryCountry;

            renderPrices();
        });
    };

    function toArray(nodeList) {
      return Array.prototype.slice.call(nodeList);
    }

    function toggleCurrency(el) {
        if ($(el).attr(CURRENCY_ATTR) === checkoutForm.currency) {
            el.classList.remove('is-hidden');
        } else {
            el.classList.add('is-hidden');
        }
    }

    function dataCurrencySel(currency, selector) {
        var otherSelector = selector && ' ' + selector || '';
        return '[' + CURRENCY_ATTR + '=' + currency + ']' + otherSelector;
    }

    return {
        init: init
    };
});
